{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mukul Pandey\\\\Downloads\\\\Collab-code-editor-main\\\\Collab-code-editor\\\\client\\\\src\\\\components\\\\SocketWrapper.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useRef, createContext, useContext } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\n\n// Create a React Context to provide the socket instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\n\n// Create a custom hook for easy access to the context\nexport const useSocket = () => {\n  _s();\n  return useContext(SocketContext);\n};\n_s(useSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function SocketWrapper({\n  children\n}) {\n  _s2();\n  var _location$state;\n  const [isConnected, setIsConnected] = useState(false);\n  const [hasJoinedRoom, setHasJoinedRoom] = useState(false);\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    roomId\n  } = useParams();\n  const username = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username) || sessionStorage.getItem('username');\n\n  // Initialize socket connection only once\n  useEffect(() => {\n    if (!socketRef.current) {\n      const serverUrl = process.env.REACT_APP_WEB_SOCKET_URL || \"http://localhost:5000\";\n      console.log('Connecting to:', serverUrl);\n      socketRef.current = io(serverUrl, {\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionAttempts: 5\n      });\n      socketRef.current.on('connect', () => {\n        console.log('Connected to server:', socketRef.current.id);\n        setIsConnected(true);\n      });\n      socketRef.current.on('disconnect', reason => {\n        console.log('Disconnected from server:', reason);\n        setIsConnected(false);\n        setHasJoinedRoom(false);\n        toast.error(`Disconnected: ${reason}`);\n      });\n      socketRef.current.on('connect_error', error => {\n        console.error('Connection error:', error);\n        setIsConnected(false);\n        toast.error('Failed to connect to server');\n      });\n      socketRef.current.on('new member joined', ({\n        username\n      }) => {\n        toast.success(`${username} joined the room`);\n      });\n      socketRef.current.on('member left', ({\n        username\n      }) => {\n        toast(`${username} left the room`, {\n          icon: 'ðŸ‘‹'\n        });\n      });\n      socketRef.current.on('join error', ({\n        message\n      }) => {\n        toast.error(message);\n        navigate('/', {\n          replace: true\n        });\n      });\n    }\n    return () => {\n      if (socketRef.current) {\n        console.log('Cleaning up socket connection');\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, []);\n\n  // Handle room joining logic\n  useEffect(() => {\n    if (roomId && !username) {\n      navigate(\"/\", {\n        replace: true\n      });\n      toast.error(\"No username provided. Please join from the home page.\");\n      return;\n    }\n    if (isConnected && socketRef.current && roomId && username && !hasJoinedRoom) {\n      console.log(`Attempting to join room: ${roomId} as ${username}`);\n      socketRef.current.emit(\"when a user joins\", {\n        roomId,\n        username\n      });\n      setHasJoinedRoom(true);\n    }\n  }, [isConnected, username, roomId, navigate, hasJoinedRoom]);\n  const socketContextValue = {\n    socket: socketRef.current,\n    isConnected,\n    hasJoinedRoom,\n    roomId,\n    username\n  };\n  if (roomId && !isConnected) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 16\n    }, this);\n  }\n  if (roomId && !hasJoinedRoom) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Joining room...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: socketContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n_s2(SocketWrapper, \"pI/5QYYd0rDiQWtK1830bLSgeS8=\", false, function () {\n  return [useLocation, useNavigate, useParams];\n});\n_c = SocketWrapper;\nvar _c;\n$RefreshReg$(_c, \"SocketWrapper\");","map":{"version":3,"names":["React","useEffect","useState","useRef","createContext","useContext","toast","useLocation","useNavigate","useParams","io","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","SocketWrapper","children","_s2","_location$state","isConnected","setIsConnected","hasJoinedRoom","setHasJoinedRoom","socketRef","location","navigate","roomId","username","state","sessionStorage","getItem","current","serverUrl","process","env","REACT_APP_WEB_SOCKET_URL","console","log","reconnection","reconnectionDelay","reconnectionAttempts","on","id","reason","error","success","icon","message","replace","disconnect","emit","socketContextValue","socket","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["C:/Users/Mukul Pandey/Downloads/Collab-code-editor-main/Collab-code-editor/client/src/components/SocketWrapper.js"],"sourcesContent":["import React, { useEffect, useState, useRef, createContext, useContext } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\n\n// Create a React Context to provide the socket instance\nconst SocketContext = createContext(null);\n\n// Create a custom hook for easy access to the context\nexport const useSocket = () => {\n    return useContext(SocketContext);\n};\n\nexport default function SocketWrapper({ children }) {\n    const [isConnected, setIsConnected] = useState(false);\n    const [hasJoinedRoom, setHasJoinedRoom] = useState(false);\n    const socketRef = useRef(null);\n    \n    const location = useLocation();\n    const navigate = useNavigate();\n    const { roomId } = useParams();\n\n    const username = location.state?.username || sessionStorage.getItem('username');\n\n    // Initialize socket connection only once\n    useEffect(() => {\n        if (!socketRef.current) {\n            const serverUrl = process.env.REACT_APP_WEB_SOCKET_URL || \"http://localhost:5000\";\n            console.log('Connecting to:', serverUrl);\n            \n            socketRef.current = io(serverUrl, {\n                reconnection: true,\n                reconnectionDelay: 1000,\n                reconnectionAttempts: 5,\n            });\n\n            socketRef.current.on('connect', () => {\n                console.log('Connected to server:', socketRef.current.id);\n                setIsConnected(true);\n            });\n\n            socketRef.current.on('disconnect', (reason) => {\n                console.log('Disconnected from server:', reason);\n                setIsConnected(false);\n                setHasJoinedRoom(false);\n                toast.error(`Disconnected: ${reason}`);\n            });\n\n            socketRef.current.on('connect_error', (error) => {\n                console.error('Connection error:', error);\n                setIsConnected(false);\n                toast.error('Failed to connect to server');\n            });\n\n            socketRef.current.on('new member joined', ({ username }) => {\n                toast.success(`${username} joined the room`);\n            });\n\n            socketRef.current.on('member left', ({ username }) => {\n                toast(`${username} left the room`, { icon: 'ðŸ‘‹' });\n            });\n            \n            socketRef.current.on('join error', ({ message }) => {\n                toast.error(message);\n                navigate('/', { replace: true });\n            });\n        }\n\n        return () => {\n            if (socketRef.current) {\n                console.log('Cleaning up socket connection');\n                socketRef.current.disconnect();\n                socketRef.current = null;\n            }\n        };\n    }, []);\n\n    // Handle room joining logic\n    useEffect(() => {\n        if (roomId && !username) {\n            navigate(\"/\", { replace: true });\n            toast.error(\"No username provided. Please join from the home page.\");\n            return;\n        }\n\n        if (isConnected && socketRef.current && roomId && username && !hasJoinedRoom) {\n            console.log(`Attempting to join room: ${roomId} as ${username}`);\n            \n            socketRef.current.emit(\"when a user joins\", { \n                roomId, \n                username\n            });\n            \n            setHasJoinedRoom(true);\n        }\n    }, [isConnected, username, roomId, navigate, hasJoinedRoom]);\n    \n    const socketContextValue = {\n        socket: socketRef.current,\n        isConnected,\n        hasJoinedRoom,\n        roomId,\n        username,\n    };\n\n    if (roomId && !isConnected) {\n        return <div><h2>Connecting to server...</h2></div>;\n    }\n\n    if (roomId && !hasJoinedRoom) {\n        return <div><h2>Joining room...</h2></div>;\n    }\n\n    return (\n        <SocketContext.Provider value={socketContextValue}>\n            {children}\n        </SocketContext.Provider>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}