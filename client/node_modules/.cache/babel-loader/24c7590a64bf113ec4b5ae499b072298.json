{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mukul Pandey\\\\Downloads\\\\Collab-code-editor-main\\\\Collab-code-editor-main\\\\client\\\\src\\\\components\\\\SocketWrapper.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef, createContext, useContext } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { io } from \"socket.io-client\"; // Create a React Context to provide the socket instance to child components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null); // Create a custom hook for easy access to the context\n\nexport const useSocket = () => {\n  _s();\n\n  return useContext(SocketContext);\n};\n\n_s(useSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function SocketWrapper(_ref) {\n  _s2();\n\n  var _location$state;\n\n  let {\n    children\n  } = _ref;\n  const [isConnected, setIsConnected] = useState(false);\n  const [hasJoinedRoom, setHasJoinedRoom] = useState(false);\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    roomId\n  } = useParams();\n  const username = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username; // Initialize socket connection only once\n\n  useEffect(() => {\n    if (!socketRef.current) {\n      const serverUrl = process.env.REACT_APP_WEB_SOCKET_URL || \"http://localhost:5000\";\n      console.log('Connecting to:', serverUrl);\n      socketRef.current = io(serverUrl, {\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionAttempts: 5\n      }); // --- Core Connection Listeners ---\n\n      socketRef.current.on('connect', () => {\n        console.log('Connected to server:', socketRef.current.id);\n        setIsConnected(true);\n      });\n      socketRef.current.on('disconnect', reason => {\n        console.log('Disconnected from server:', reason);\n        setIsConnected(false);\n        setHasJoinedRoom(false);\n        toast.error(`Disconnected: ${reason}`);\n      });\n      socketRef.current.on('connect_error', error => {\n        console.error('Connection error:', error);\n        setIsConnected(false);\n        toast.error('Failed to connect to server');\n      }); // --- Global App Notification Listeners ---\n      // These listeners handle app-wide notifications.\n      // REMEMBER: Remove these listeners from Room.js to avoid duplicate toasts.\n\n      socketRef.current.on('new member joined', _ref2 => {\n        let {\n          username\n        } = _ref2;\n        toast.success(`${username} joined the room`);\n      });\n      socketRef.current.on('member left', _ref3 => {\n        let {\n          username\n        } = _ref3;\n        toast(`${username} left the room`, {\n          icon: 'ðŸ‘‹'\n        });\n      });\n      socketRef.current.on('join error', _ref4 => {\n        let {\n          message\n        } = _ref4;\n        toast.error(message);\n        navigate('/', {\n          replace: true\n        });\n      });\n    } // Cleanup on component unmount\n\n\n    return () => {\n      if (socketRef.current) {\n        console.log('Cleaning up socket connection');\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, []); // Empty dependency array ensures this runs only once\n  // Handle room joining logic\n\n  useEffect(() => {\n    // Redirect if user lands on room page directly without a username\n    if (roomId && !username) {\n      navigate(\"/\", {\n        replace: true\n      });\n      toast.error(\"No username provided. Please join from the home page.\");\n      return;\n    } // Join the room once connected\n\n\n    if (isConnected && socketRef.current && roomId && username && !hasJoinedRoom) {\n      console.log(`Attempting to join room: ${roomId} as ${username}`);\n      socketRef.current.emit(\"when a user joins\", {\n        roomId,\n        username\n      });\n      setHasJoinedRoom(true);\n    }\n  }, [isConnected, username, roomId, navigate, hasJoinedRoom]); // The value provided by the context\n\n  const socketContextValue = {\n    socket: socketRef.current,\n    isConnected,\n    hasJoinedRoom,\n    roomId,\n    username\n  }; // Render loading states or children\n\n  if (roomId && !isConnected) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (roomId && !hasJoinedRoom) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Joining room...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: socketContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(SocketWrapper, \"pI/5QYYd0rDiQWtK1830bLSgeS8=\", false, function () {\n  return [useLocation, useNavigate, useParams];\n});\n\n_c = SocketWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketWrapper\");","map":{"version":3,"names":["React","useEffect","useState","useRef","createContext","useContext","toast","useLocation","useNavigate","useParams","io","SocketContext","useSocket","SocketWrapper","children","isConnected","setIsConnected","hasJoinedRoom","setHasJoinedRoom","socketRef","location","navigate","roomId","username","state","current","serverUrl","process","env","REACT_APP_WEB_SOCKET_URL","console","log","reconnection","reconnectionDelay","reconnectionAttempts","on","id","reason","error","success","icon","message","replace","disconnect","emit","socketContextValue","socket"],"sources":["C:/Users/Mukul Pandey/Downloads/Collab-code-editor-main/Collab-code-editor-main/client/src/components/SocketWrapper.js"],"sourcesContent":["import React, { useEffect, useState, useRef, createContext, useContext } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\n\n// Create a React Context to provide the socket instance to child components\nconst SocketContext = createContext(null);\n\n// Create a custom hook for easy access to the context\nexport const useSocket = () => {\n    return useContext(SocketContext);\n};\n\nexport default function SocketWrapper({ children }) {\n    const [isConnected, setIsConnected] = useState(false);\n    const [hasJoinedRoom, setHasJoinedRoom] = useState(false);\n    const socketRef = useRef(null);\n    \n    const location = useLocation();\n    const navigate = useNavigate();\n    const { roomId } = useParams();\n    const username = location.state?.username;\n\n    // Initialize socket connection only once\n    useEffect(() => {\n        if (!socketRef.current) {\n            const serverUrl = process.env.REACT_APP_WEB_SOCKET_URL || \"http://localhost:5000\";\n            console.log('Connecting to:', serverUrl);\n            \n            socketRef.current = io(serverUrl, {\n                reconnection: true,\n                reconnectionDelay: 1000,\n                reconnectionAttempts: 5,\n            });\n\n            // --- Core Connection Listeners ---\n            socketRef.current.on('connect', () => {\n                console.log('Connected to server:', socketRef.current.id);\n                setIsConnected(true);\n            });\n\n            socketRef.current.on('disconnect', (reason) => {\n                console.log('Disconnected from server:', reason);\n                setIsConnected(false);\n                setHasJoinedRoom(false);\n                toast.error(`Disconnected: ${reason}`);\n            });\n\n            socketRef.current.on('connect_error', (error) => {\n                console.error('Connection error:', error);\n                setIsConnected(false);\n                toast.error('Failed to connect to server');\n            });\n\n            // --- Global App Notification Listeners ---\n            // These listeners handle app-wide notifications.\n            // REMEMBER: Remove these listeners from Room.js to avoid duplicate toasts.\n            socketRef.current.on('new member joined', ({ username }) => {\n                toast.success(`${username} joined the room`);\n            });\n\n            socketRef.current.on('member left', ({ username }) => {\n                toast(`${username} left the room`, { icon: 'ðŸ‘‹' });\n            });\n            \n            socketRef.current.on('join error', ({ message }) => {\n                toast.error(message);\n                navigate('/', { replace: true });\n            });\n        }\n\n        // Cleanup on component unmount\n        return () => {\n            if (socketRef.current) {\n                console.log('Cleaning up socket connection');\n                socketRef.current.disconnect();\n                socketRef.current = null;\n            }\n        };\n    }, []); // Empty dependency array ensures this runs only once\n\n    // Handle room joining logic\n    useEffect(() => {\n        // Redirect if user lands on room page directly without a username\n        if (roomId && !username) {\n            navigate(\"/\", { replace: true });\n            toast.error(\"No username provided. Please join from the home page.\");\n            return;\n        }\n\n        // Join the room once connected\n        if (isConnected && socketRef.current && roomId && username && !hasJoinedRoom) {\n            console.log(`Attempting to join room: ${roomId} as ${username}`);\n            \n            socketRef.current.emit(\"when a user joins\", { \n                roomId, \n                username\n            });\n            \n            setHasJoinedRoom(true);\n        }\n    }, [isConnected, username, roomId, navigate, hasJoinedRoom]);\n    \n    // The value provided by the context\n    const socketContextValue = {\n        socket: socketRef.current,\n        isConnected,\n        hasJoinedRoom,\n        roomId,\n        username,\n    };\n\n    // Render loading states or children\n    if (roomId && !isConnected) {\n        return <div><h2>Connecting to server...</h2></div>;\n    }\n\n    if (roomId && !hasJoinedRoom) {\n        return <div><h2>Joining room...</h2></div>;\n    }\n\n    return (\n        <SocketContext.Provider value={socketContextValue}>\n            {children}\n        </SocketContext.Provider>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}