{"ast":null,"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@\\\\w+(?=\\\\s|$)\"\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/c_cpp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var cFunctions = exports.cFunctions = \"\\\\b(?:hypot(?:f|l)?|s(?:scanf|ystem|nprintf|ca(?:nf|lb(?:n(?:f|l)?|ln(?:f|l)?))|i(?:n(?:h(?:f|l)?|f|l)?|gn(?:al|bit))|tr(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(?:jmp|vbuf|locale|buf)|qrt(?:f|l)?|w(?:scanf|printf)|rand)|n(?:e(?:arbyint(?:f|l)?|xt(?:toward(?:f|l)?|after(?:f|l)?))|an(?:f|l)?)|c(?:s(?:in(?:h(?:f|l)?|f|l)?|qrt(?:f|l)?)|cos(?:h(?:f)?|f|l)?|imag(?:f|l)?|t(?:ime|an(?:h(?:f|l)?|f|l)?)|o(?:s(?:h(?:f|l)?|f|l)?|nj(?:f|l)?|pysign(?:f|l)?)|p(?:ow(?:f|l)?|roj(?:f|l)?)|e(?:il(?:f|l)?|xp(?:f|l)?)|l(?:o(?:ck|g(?:f|l)?)|earerr)|a(?:sin(?:h(?:f|l)?|f|l)?|cos(?:h(?:f|l)?|f|l)?|tan(?:h(?:f|l)?|f|l)?|lloc|rg(?:f|l)?|bs(?:f|l)?)|real(?:f|l)?|brt(?:f|l)?)|t(?:ime|o(?:upper|lower)|an(?:h(?:f|l)?|f|l)?|runc(?:f|l)?|gamma(?:f|l)?|mp(?:nam|file))|i(?:s(?:space|n(?:ormal|an)|cntrl|inf|digit|u(?:nordered|pper)|p(?:unct|rint)|finite|w(?:space|c(?:ntrl|type)|digit|upper|p(?:unct|rint)|lower|al(?:num|pha)|graph|xdigit|blank)|l(?:ower|ess(?:equal|greater)?)|al(?:num|pha)|gr(?:eater(?:equal)?|aph)|xdigit|blank)|logb(?:f|l)?|max(?:div|abs))|di(?:v|fftime)|_Exit|unget(?:c|wc)|p(?:ow(?:f|l)?|ut(?:s|c(?:har)?|wc(?:har)?)|error|rintf)|e(?:rf(?:c(?:f|l)?|f|l)?|x(?:it|p(?:2(?:f|l)?|f|l|m1(?:f|l)?)?))|v(?:s(?:scanf|nprintf|canf|printf|w(?:scanf|printf))|printf|f(?:scanf|printf|w(?:scanf|printf))|w(?:scanf|printf)|a_(?:start|copy|end|arg))|qsort|f(?:s(?:canf|e(?:tpos|ek))|close|tell|open|dim(?:f|l)?|p(?:classify|ut(?:s|c|w(?:s|c))|rintf)|e(?:holdexcept|set(?:e(?:nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(?:aiseexcept|ror)|get(?:e(?:nv|xceptflag)|round))|flush|w(?:scanf|ide|printf|rite)|loor(?:f|l)?|abs(?:f|l)?|get(?:s|c|pos|w(?:s|c))|re(?:open|e|ad|xp(?:f|l)?)|m(?:in(?:f|l)?|od(?:f|l)?|a(?:f|l|x(?:f|l)?)?))|l(?:d(?:iv|exp(?:f|l)?)|o(?:ngjmp|cal(?:time|econv)|g(?:1(?:p(?:f|l)?|0(?:f|l)?)|2(?:f|l)?|f|l|b(?:f|l)?)?)|abs|l(?:div|abs|r(?:int(?:f|l)?|ound(?:f|l)?))|r(?:int(?:f|l)?|ound(?:f|l)?)|gamma(?:f|l)?)|w(?:scanf|c(?:s(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?|mbs)|pbrk|ftime|len|r(?:chr|tombs)|xfrm)|to(?:b|mb)|rtomb)|printf|mem(?:set|c(?:hr|py|mp)|move))|a(?:s(?:sert|ctime|in(?:h(?:f|l)?|f|l)?)|cos(?:h(?:f|l)?|f|l)?|t(?:o(?:i|f|l(?:l)?)|exit|an(?:h(?:f|l)?|2(?:f|l)?|f|l)?)|b(?:s|ort))|g(?:et(?:s|c(?:har)?|env|wc(?:har)?)|mtime)|r(?:int(?:f|l)?|ound(?:f|l)?|e(?:name|alloc|wind|m(?:ove|quo(?:f|l)?|ainder(?:f|l)?))|a(?:nd|ise))|b(?:search|towc)|m(?:odf(?:f|l)?|em(?:set|c(?:hr|py|mp)|move)|ktime|alloc|b(?:s(?:init|towcs|rtowcs)|towc|len|r(?:towc|len))))\\\\b\";\n\n  var c_cppHighlightRules = function () {\n    var keywordControls = \"break|case|continue|default|do|else|for|goto|if|_Pragma|\" + \"return|switch|while|catch|operator|try|throw|using\";\n    var storageType = \"asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|\" + \"_Imaginary|int|int8_t|int16_t|int32_t|int64_t|long|short|signed|size_t|struct|typedef|uint8_t|uint16_t|uint32_t|uint64_t|union|unsigned|void|\" + \"class|wchar_t|template|char16_t|char32_t\";\n    var storageModifiers = \"const|extern|register|restrict|static|volatile|inline|private|\" + \"protected|public|friend|explicit|virtual|export|mutable|typename|\" + \"constexpr|new|delete|alignas|alignof|decltype|noexcept|thread_local\";\n    var keywordOperators = \"and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|\" + \"const_cast|dynamic_cast|reinterpret_cast|static_cast|sizeof|namespace\";\n    var builtinConstants = \"NULL|true|false|TRUE|FALSE|nullptr\";\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n      \"keyword.control\": keywordControls,\n      \"storage.type\": storageType,\n      \"storage.modifier\": storageModifiers,\n      \"keyword.operator\": keywordOperators,\n      \"variable.language\": \"this\",\n      \"constant.language\": builtinConstants\n    }, \"identifier\");\n    var identifierRe = \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\\\\b\";\n    var escapeRe = /\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;\n    var formatRe = \"%\" + /(\\d+\\$)?/.source // field (argument #)\n    + /[#0\\- +']*/.source // flags\n    + /[,;:_]?/.source // separator character (AltiVec)\n    + /((-?\\d+)|\\*(-?\\d+\\$)?)?/.source // minimum field width\n    + /(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?/.source // precision\n    + /(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?/.source // length modifier\n    + /(\\[[^\"\\]]+\\]|[diouxXDOUeEfFgGaACcSspn%])/.source; // conversion type\n\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"//$\",\n        next: \"start\"\n      }, {\n        token: \"comment\",\n        regex: \"//\",\n        next: \"singleLineComment\"\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"string\",\n        regex: \"'(?:\" + escapeRe + \"|.)?'\"\n      }, {\n        token: \"string.start\",\n        regex: '\"',\n        stateName: \"qqstring\",\n        next: [{\n          token: \"string\",\n          regex: /\\\\\\s*$/,\n          next: \"qqstring\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: escapeRe\n        }, {\n          token: \"constant.language.escape\",\n          regex: formatRe\n        }, {\n          token: \"string.end\",\n          regex: '\"|$',\n          next: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: 'R\"\\\\(',\n        stateName: \"rawString\",\n        next: [{\n          token: \"string.end\",\n          regex: '\\\\)\"',\n          next: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"constant.numeric\",\n        regex: \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"keyword\",\n        regex: \"#\\\\s*(?:include|import|pragma|line|define|undef)\\\\b\",\n        next: \"directive\"\n      }, {\n        token: \"keyword\",\n        regex: \"#\\\\s*(?:endif|if|ifdef|else|elif|ifndef)\\\\b\"\n      }, {\n        token: \"support.function.C99.c\",\n        regex: cFunctions\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\"\n      }, {\n        token: \"keyword.operator\",\n        regex: /--|\\+\\+|<<=|>>=|>>>=|<>|&&|\\|\\||\\?:|[*%\\/+\\-&\\^|~!<>=]=?/\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"singleLineComment\": [{\n        token: \"comment\",\n        regex: /\\\\$/,\n        next: \"singleLineComment\"\n      }, {\n        token: \"comment\",\n        regex: /$/,\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }],\n      \"directive\": [{\n        token: \"constant.other.multiline\",\n        regex: /\\\\/\n      }, {\n        token: \"constant.other.multiline\",\n        regex: /.*\\\\/\n      }, {\n        token: \"constant.other\",\n        regex: \"\\\\s*<.+?>\",\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        regex: '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]',\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        regex: \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\n        next: \"start\"\n      }, {\n        token: \"constant.other\",\n        regex: /[^\\\\\\/]+/,\n        next: \"start\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n\n  oop.inherits(c_cppHighlightRules, TextHighlightRules);\n  exports.c_cppHighlightRules = c_cppHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/c_cpp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/c_cpp_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var c_cppHighlightRules = require(\"./c_cpp_highlight_rules\").c_cppHighlightRules;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = c_cppHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      } else if (state == \"doc-start\") {\n        if (endState == \"start\") {\n          return \"\";\n        }\n\n        var match = line.match(/^\\s*(\\/?)\\*/);\n\n        if (match) {\n          if (match[1]) {\n            indent += \" \";\n          }\n\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/c_cpp\";\n    this.snippetFileId = \"ace/snippets/c_cpp\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/c_cpp\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"names":["ace","define","require","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","cFunctions","c_cppHighlightRules","keywordControls","storageType","storageModifiers","keywordOperators","builtinConstants","keywordMapper","$keywords","createKeywordMapper","identifierRe","escapeRe","source","formatRe","stateName","embedRules","normalizeRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CStyleFoldMode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id","snippetFileId"],"sources":["C:/Users/Mukul Pandey/Downloads/Collab-code-editor-main/Collab-code-editor/client/node_modules/ace-builds/src-noconflict/mode-c_cpp.js"],"sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\nDocCommentHighlightRules.getTagRule = function (start) {\n    return {\n        token: \"comment.doc.tag.storage.type\",\n        regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\nDocCommentHighlightRules.getStartRule = function (start) {\n    return {\n        token: \"comment.doc\",\n        regex: \"\\\\/\\\\*(?=\\\\*)\",\n        next: start\n    };\n};\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token: \"comment.doc\",\n        regex: \"\\\\*\\\\/\",\n        next: start\n    };\n};\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/c_cpp_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar cFunctions = exports.cFunctions = \"\\\\b(?:hypot(?:f|l)?|s(?:scanf|ystem|nprintf|ca(?:nf|lb(?:n(?:f|l)?|ln(?:f|l)?))|i(?:n(?:h(?:f|l)?|f|l)?|gn(?:al|bit))|tr(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(?:jmp|vbuf|locale|buf)|qrt(?:f|l)?|w(?:scanf|printf)|rand)|n(?:e(?:arbyint(?:f|l)?|xt(?:toward(?:f|l)?|after(?:f|l)?))|an(?:f|l)?)|c(?:s(?:in(?:h(?:f|l)?|f|l)?|qrt(?:f|l)?)|cos(?:h(?:f)?|f|l)?|imag(?:f|l)?|t(?:ime|an(?:h(?:f|l)?|f|l)?)|o(?:s(?:h(?:f|l)?|f|l)?|nj(?:f|l)?|pysign(?:f|l)?)|p(?:ow(?:f|l)?|roj(?:f|l)?)|e(?:il(?:f|l)?|xp(?:f|l)?)|l(?:o(?:ck|g(?:f|l)?)|earerr)|a(?:sin(?:h(?:f|l)?|f|l)?|cos(?:h(?:f|l)?|f|l)?|tan(?:h(?:f|l)?|f|l)?|lloc|rg(?:f|l)?|bs(?:f|l)?)|real(?:f|l)?|brt(?:f|l)?)|t(?:ime|o(?:upper|lower)|an(?:h(?:f|l)?|f|l)?|runc(?:f|l)?|gamma(?:f|l)?|mp(?:nam|file))|i(?:s(?:space|n(?:ormal|an)|cntrl|inf|digit|u(?:nordered|pper)|p(?:unct|rint)|finite|w(?:space|c(?:ntrl|type)|digit|upper|p(?:unct|rint)|lower|al(?:num|pha)|graph|xdigit|blank)|l(?:ower|ess(?:equal|greater)?)|al(?:num|pha)|gr(?:eater(?:equal)?|aph)|xdigit|blank)|logb(?:f|l)?|max(?:div|abs))|di(?:v|fftime)|_Exit|unget(?:c|wc)|p(?:ow(?:f|l)?|ut(?:s|c(?:har)?|wc(?:har)?)|error|rintf)|e(?:rf(?:c(?:f|l)?|f|l)?|x(?:it|p(?:2(?:f|l)?|f|l|m1(?:f|l)?)?))|v(?:s(?:scanf|nprintf|canf|printf|w(?:scanf|printf))|printf|f(?:scanf|printf|w(?:scanf|printf))|w(?:scanf|printf)|a_(?:start|copy|end|arg))|qsort|f(?:s(?:canf|e(?:tpos|ek))|close|tell|open|dim(?:f|l)?|p(?:classify|ut(?:s|c|w(?:s|c))|rintf)|e(?:holdexcept|set(?:e(?:nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(?:aiseexcept|ror)|get(?:e(?:nv|xceptflag)|round))|flush|w(?:scanf|ide|printf|rite)|loor(?:f|l)?|abs(?:f|l)?|get(?:s|c|pos|w(?:s|c))|re(?:open|e|ad|xp(?:f|l)?)|m(?:in(?:f|l)?|od(?:f|l)?|a(?:f|l|x(?:f|l)?)?))|l(?:d(?:iv|exp(?:f|l)?)|o(?:ngjmp|cal(?:time|econv)|g(?:1(?:p(?:f|l)?|0(?:f|l)?)|2(?:f|l)?|f|l|b(?:f|l)?)?)|abs|l(?:div|abs|r(?:int(?:f|l)?|ound(?:f|l)?))|r(?:int(?:f|l)?|ound(?:f|l)?)|gamma(?:f|l)?)|w(?:scanf|c(?:s(?:s(?:tr|pn)|nc(?:py|at|mp)|c(?:spn|hr|oll|py|at|mp)|to(?:imax|d|u(?:l(?:l)?|max)|k|f|l(?:d|l)?|mbs)|pbrk|ftime|len|r(?:chr|tombs)|xfrm)|to(?:b|mb)|rtomb)|printf|mem(?:set|c(?:hr|py|mp)|move))|a(?:s(?:sert|ctime|in(?:h(?:f|l)?|f|l)?)|cos(?:h(?:f|l)?|f|l)?|t(?:o(?:i|f|l(?:l)?)|exit|an(?:h(?:f|l)?|2(?:f|l)?|f|l)?)|b(?:s|ort))|g(?:et(?:s|c(?:har)?|env|wc(?:har)?)|mtime)|r(?:int(?:f|l)?|ound(?:f|l)?|e(?:name|alloc|wind|m(?:ove|quo(?:f|l)?|ainder(?:f|l)?))|a(?:nd|ise))|b(?:search|towc)|m(?:odf(?:f|l)?|em(?:set|c(?:hr|py|mp)|move)|ktime|alloc|b(?:s(?:init|towcs|rtowcs)|towc|len|r(?:towc|len))))\\\\b\";\nvar c_cppHighlightRules = function () {\n    var keywordControls = (\"break|case|continue|default|do|else|for|goto|if|_Pragma|\" +\n        \"return|switch|while|catch|operator|try|throw|using\");\n    var storageType = (\"asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|\" +\n        \"_Imaginary|int|int8_t|int16_t|int32_t|int64_t|long|short|signed|size_t|struct|typedef|uint8_t|uint16_t|uint32_t|uint64_t|union|unsigned|void|\" +\n        \"class|wchar_t|template|char16_t|char32_t\");\n    var storageModifiers = (\"const|extern|register|restrict|static|volatile|inline|private|\" +\n        \"protected|public|friend|explicit|virtual|export|mutable|typename|\" +\n        \"constexpr|new|delete|alignas|alignof|decltype|noexcept|thread_local\");\n    var keywordOperators = (\"and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|\" +\n        \"const_cast|dynamic_cast|reinterpret_cast|static_cast|sizeof|namespace\");\n    var builtinConstants = (\"NULL|true|false|TRUE|FALSE|nullptr\");\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"keyword.control\": keywordControls,\n        \"storage.type\": storageType,\n        \"storage.modifier\": storageModifiers,\n        \"keyword.operator\": keywordOperators,\n        \"variable.language\": \"this\",\n        \"constant.language\": builtinConstants\n    }, \"identifier\");\n    var identifierRe = \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\\\\b\";\n    var escapeRe = /\\\\(?:['\"?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}U[a-fA-F\\d]{8}|.)/.source;\n    var formatRe = \"%\"\n        + /(\\d+\\$)?/.source // field (argument #)\n        + /[#0\\- +']*/.source // flags\n        + /[,;:_]?/.source // separator character (AltiVec)\n        + /((-?\\d+)|\\*(-?\\d+\\$)?)?/.source // minimum field width\n        + /(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?/.source // precision\n        + /(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?/.source // length modifier\n        + /(\\[[^\"\\]]+\\]|[diouxXDOUeEfFgGaACcSspn%])/.source; // conversion type\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment\",\n                regex: \"//$\",\n                next: \"start\"\n            }, {\n                token: \"comment\",\n                regex: \"//\",\n                next: \"singleLineComment\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token: \"comment\",\n                regex: \"\\\\/\\\\*\",\n                next: \"comment\"\n            }, {\n                token: \"string\",\n                regex: \"'(?:\" + escapeRe + \"|.)?'\"\n            }, {\n                token: \"string.start\",\n                regex: '\"',\n                stateName: \"qqstring\",\n                next: [\n                    { token: \"string\", regex: /\\\\\\s*$/, next: \"qqstring\" },\n                    { token: \"constant.language.escape\", regex: escapeRe },\n                    { token: \"constant.language.escape\", regex: formatRe },\n                    { token: \"string.end\", regex: '\"|$', next: \"start\" },\n                    { defaultToken: \"string\" }\n                ]\n            }, {\n                token: \"string.start\",\n                regex: 'R\"\\\\(',\n                stateName: \"rawString\",\n                next: [\n                    { token: \"string.end\", regex: '\\\\)\"', next: \"start\" },\n                    { defaultToken: \"string\" }\n                ]\n            }, {\n                token: \"constant.numeric\",\n                regex: \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n            }, {\n                token: \"constant.numeric\",\n                regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n            }, {\n                token: \"keyword\",\n                regex: \"#\\\\s*(?:include|import|pragma|line|define|undef)\\\\b\",\n                next: \"directive\"\n            }, {\n                token: \"keyword\",\n                regex: \"#\\\\s*(?:endif|if|ifdef|else|elif|ifndef)\\\\b\"\n            }, {\n                token: \"support.function.C99.c\",\n                regex: cFunctions\n            }, {\n                token: keywordMapper,\n                regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\"\n            }, {\n                token: \"keyword.operator\",\n                regex: /--|\\+\\+|<<=|>>=|>>>=|<>|&&|\\|\\||\\?:|[*%\\/+\\-&\\^|~!<>=]=?/\n            }, {\n                token: \"punctuation.operator\",\n                regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n            }, {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            }, {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ],\n        \"comment\": [\n            {\n                token: \"comment\",\n                regex: \"\\\\*\\\\/\",\n                next: \"start\"\n            }, {\n                defaultToken: \"comment\"\n            }\n        ],\n        \"singleLineComment\": [\n            {\n                token: \"comment\",\n                regex: /\\\\$/,\n                next: \"singleLineComment\"\n            }, {\n                token: \"comment\",\n                regex: /$/,\n                next: \"start\"\n            }, {\n                defaultToken: \"comment\"\n            }\n        ],\n        \"directive\": [\n            {\n                token: \"constant.other.multiline\",\n                regex: /\\\\/\n            },\n            {\n                token: \"constant.other.multiline\",\n                regex: /.*\\\\/\n            },\n            {\n                token: \"constant.other\",\n                regex: \"\\\\s*<.+?>\",\n                next: \"start\"\n            },\n            {\n                token: \"constant.other\",\n                regex: '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]',\n                next: \"start\"\n            },\n            {\n                token: \"constant.other\",\n                regex: \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\n                next: \"start\"\n            },\n            {\n                token: \"constant.other\",\n                regex: /[^\\\\\\/]+/,\n                next: \"start\"\n            }\n        ]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n};\noop.inherits(c_cppHighlightRules, TextHighlightRules);\nexports.c_cppHighlightRules = c_cppHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module){\"use strict\";\nvar Range = require(\"../range\").Range;\nvar MatchingBraceOutdent = function () { };\n(function () {\n    this.checkOutdent = function (line, input) {\n        if (!/^\\s+$/.test(line))\n            return false;\n        return /^\\s*\\}/.test(input);\n    };\n    this.autoOutdent = function (doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n        if (!match)\n            return 0;\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({ row: row, column: column });\n        if (!openBracePos || openBracePos.row == row)\n            return 0;\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n    this.$getIndent = function (line) {\n        return line.match(/^\\s*/)[0];\n    };\n}).call(MatchingBraceOutdent.prototype);\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n(function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n        return fw;\n    };\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                }\n                else if (foldStyle != \"all\")\n                    range = null;\n            }\n            return range;\n        }\n        if (foldStyle === \"markbegin\")\n            return;\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    this.getSectionRange = function (session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                }\n                else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                }\n                else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function (session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n            if (!depth)\n                break;\n        }\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/c_cpp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/c_cpp_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/cstyle\"], function(require, exports, module){\"use strict\";\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar c_cppHighlightRules = require(\"./c_cpp_highlight_rules\").c_cppHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar Mode = function () {\n    this.HighlightRules = c_cppHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = { start: \"/*\", end: \"*/\" };\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n        else if (state == \"doc-start\") {\n            if (endState == \"start\") {\n                return \"\";\n            }\n            var match = line.match(/^\\s*(\\/?)\\*/);\n            if (match) {\n                if (match[1]) {\n                    indent += \" \";\n                }\n                indent += \"* \";\n            }\n        }\n        return indent;\n    };\n    this.checkOutdent = function (state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n    this.autoOutdent = function (state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/c_cpp\";\n    this.snippetFileId = \"ace/snippets/c_cpp\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/c_cpp\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "],"mappings":"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"},"metadata":{},"sourceType":"script"}