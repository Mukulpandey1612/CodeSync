{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mukul Pandey\\\\Downloads\\\\Collab-code-editor-main\\\\Collab-code-editor-main\\\\client\\\\src\\\\components\\\\SocketWrapper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction addPropsToReactElement(element, props) {\n  if ( /*#__PURE__*/React.isValidElement(element)) {\n    return /*#__PURE__*/React.cloneElement(element, props);\n  }\n\n  return element;\n}\n\nfunction addPropsToChildren(children, props) {\n  if (!Array.isArray(children)) {\n    return addPropsToReactElement(children, props);\n  }\n\n  return children.map(childElement => addPropsToReactElement(childElement, props));\n}\n\nexport default function SocketWrapper(_ref) {\n  _s();\n\n  var _location$state2, _location$state3;\n\n  let {\n    children\n  } = _ref;\n  const [isConnected, setIsConnected] = useState(false);\n  const [hasJoinedRoom, setHasJoinedRoom] = useState(false);\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    roomId\n  } = useParams(); // Initialize socket connection only once\n\n  useEffect(() => {\n    if (!socketRef.current) {\n      // Use port 3001 if you changed it in server, otherwise 5000\n      const serverUrl = process.env.REACT_APP_WEB_SOCKET_URL || \"http://localhost:5000\";\n      console.log('Connecting to:', serverUrl);\n      socketRef.current = io(serverUrl, {\n        transports: ['websocket', 'polling'],\n        // Fallback options\n        timeout: 10000,\n        // Increased timeout\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionAttempts: 5,\n        maxReconnectionAttempts: 5\n      }); // Set up connection event listeners\n\n      socketRef.current.on('connect', () => {\n        console.log('Connected to server:', socketRef.current.id);\n        setIsConnected(true);\n        toast.success('Connected to server');\n      });\n      socketRef.current.on('disconnect', reason => {\n        console.log('Disconnected from server:', reason);\n        setIsConnected(false);\n        setHasJoinedRoom(false);\n        toast.error(`Disconnected: ${reason}`);\n      });\n      socketRef.current.on('connect_error', error => {\n        console.error('Connection error:', error);\n        setIsConnected(false);\n        toast.error('Failed to connect to server');\n      });\n      socketRef.current.on('reconnect', attemptNumber => {\n        console.log('Reconnected after', attemptNumber, 'attempts');\n        toast.success('Reconnected to server');\n        setHasJoinedRoom(false); // Reset to rejoin room\n      }); // Set up room-related event listeners\n\n      socketRef.current.on('error', error => {\n        console.error('Socket error:', error);\n        toast.error(error.message || 'Socket error occurred');\n      });\n      socketRef.current.on('new member joined', _ref2 => {\n        let {\n          username\n        } = _ref2;\n        console.log(`New member joined: ${username}`);\n        toast.success(`${username} joined the room`);\n      });\n      socketRef.current.on('member left', _ref3 => {\n        let {\n          username\n        } = _ref3;\n        console.log(`Member left: ${username}`);\n        toast.success(`${username} left the room`);\n      }); // Listen for user list updates\n\n      socketRef.current.on('updating client list', _ref4 => {\n        let {\n          userslist\n        } = _ref4;\n        console.log('Updated users list:', userslist); // You can emit this data to child components or store in state if needed\n      });\n    } // Cleanup on unmount\n\n\n    return () => {\n      if (socketRef.current) {\n        console.log('Cleaning up socket connection');\n\n        if (roomId && hasJoinedRoom) {\n          socketRef.current.emit(\"leave room\", {\n            roomId\n          });\n        }\n\n        socketRef.current.disconnect();\n        socketRef.current = null;\n        setIsConnected(false);\n        setHasJoinedRoom(false);\n      }\n    };\n  }, []); // Empty dependency array - only run once\n  // Handle room joining\n\n  useEffect(() => {\n    var _location$state;\n\n    function kickStrangerOut() {\n      navigate(\"/\", {\n        replace: true\n      });\n      toast.error(\"No username provided\");\n    }\n\n    if (!((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.username)) {\n      kickStrangerOut();\n      return;\n    } // Only join room when socket is connected and hasn't joined yet\n\n\n    if (isConnected && socketRef.current && roomId && !hasJoinedRoom) {\n      console.log(`Attempting to join room: ${roomId} as ${location.state.username}`);\n      socketRef.current.emit(\"when a user joins\", {\n        roomId,\n        username: location.state.username\n      });\n      setHasJoinedRoom(true); // Set up one-time listener for successful join\n\n      const handleJoinSuccess = _ref5 => {\n        let {\n          userslist\n        } = _ref5;\n        console.log('Successfully joined room, users:', userslist);\n        toast.success(`Joined room: ${roomId}`);\n        socketRef.current.off('updating client list', handleJoinSuccess);\n      };\n\n      socketRef.current.on('updating client list', handleJoinSuccess);\n    }\n  }, [isConnected, location.state, roomId, navigate, hasJoinedRoom]); // Handle page refresh/navigation cleanup\n\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (socketRef.current && roomId && hasJoinedRoom) {\n        socketRef.current.emit(\"leave room\", {\n          roomId\n        });\n      }\n    }; // Handle route changes\n\n\n    const handleRouteChange = () => {\n      if (socketRef.current && roomId && hasJoinedRoom) {\n        socketRef.current.emit(\"leave room\", {\n          roomId\n        });\n        setHasJoinedRoom(false);\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      handleRouteChange();\n    };\n  }, [roomId, hasJoinedRoom]);\n\n  if (!((_location$state2 = location.state) !== null && _location$state2 !== void 0 && _location$state2.username)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No username provided. Please use the form to join a room.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (!isConnected) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Connecting to server...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please wait while we establish connection...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (!hasJoinedRoom) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Joining room...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please wait while we join the room...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: addPropsToChildren(children, {\n      socket: socketRef.current,\n      isConnected,\n      roomId,\n      username: (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.username\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SocketWrapper, \"D0Tk55ue+IXaXrEjMYd+ZLmnoFI=\", false, function () {\n  return [useLocation, useNavigate, useParams];\n});\n\n_c = SocketWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocketWrapper\");","map":{"version":3,"names":["React","useEffect","useState","useRef","toast","useLocation","useNavigate","useParams","io","addPropsToReactElement","element","props","isValidElement","cloneElement","addPropsToChildren","children","Array","isArray","map","childElement","SocketWrapper","isConnected","setIsConnected","hasJoinedRoom","setHasJoinedRoom","socketRef","location","navigate","roomId","current","serverUrl","process","env","REACT_APP_WEB_SOCKET_URL","console","log","transports","timeout","reconnection","reconnectionDelay","reconnectionAttempts","maxReconnectionAttempts","on","id","success","reason","error","attemptNumber","message","username","userslist","emit","disconnect","kickStrangerOut","replace","state","handleJoinSuccess","off","handleBeforeUnload","handleRouteChange","window","addEventListener","removeEventListener","socket"],"sources":["C:/Users/Mukul Pandey/Downloads/Collab-code-editor-main/Collab-code-editor-main/client/src/components/SocketWrapper.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { io } from \"socket.io-client\";\n\nfunction addPropsToReactElement(element, props) {\n    if (React.isValidElement(element)) {\n        return React.cloneElement(element, props)\n    }\n    return element\n}\n\nfunction addPropsToChildren(children, props) {\n    if (!Array.isArray(children)) {\n        return addPropsToReactElement(children, props)\n    }\n    return children.map(childElement =>\n        addPropsToReactElement(childElement, props)\n    )\n}\n\nexport default function SocketWrapper({ children }) {\n    const [isConnected, setIsConnected] = useState(false)\n    const [hasJoinedRoom, setHasJoinedRoom] = useState(false)\n    const socketRef = useRef(null)\n    \n    const location = useLocation()\n    const navigate = useNavigate()\n    const { roomId } = useParams()\n\n    // Initialize socket connection only once\n    useEffect(() => {\n        if (!socketRef.current) {\n            // Use port 3001 if you changed it in server, otherwise 5000\n            const serverUrl = process.env.REACT_APP_WEB_SOCKET_URL || \"http://localhost:5000\"\n            console.log('Connecting to:', serverUrl)\n            \n            socketRef.current = io(serverUrl, {\n                transports: ['websocket', 'polling'], // Fallback options\n                timeout: 10000, // Increased timeout\n                reconnection: true,\n                reconnectionDelay: 1000,\n                reconnectionAttempts: 5,\n                maxReconnectionAttempts: 5\n            })\n\n            // Set up connection event listeners\n            socketRef.current.on('connect', () => {\n                console.log('Connected to server:', socketRef.current.id)\n                setIsConnected(true)\n                toast.success('Connected to server')\n            })\n\n            socketRef.current.on('disconnect', (reason) => {\n                console.log('Disconnected from server:', reason)\n                setIsConnected(false)\n                setHasJoinedRoom(false)\n                toast.error(`Disconnected: ${reason}`)\n            })\n\n            socketRef.current.on('connect_error', (error) => {\n                console.error('Connection error:', error)\n                setIsConnected(false)\n                toast.error('Failed to connect to server')\n            })\n\n            socketRef.current.on('reconnect', (attemptNumber) => {\n                console.log('Reconnected after', attemptNumber, 'attempts')\n                toast.success('Reconnected to server')\n                setHasJoinedRoom(false) // Reset to rejoin room\n            })\n\n            // Set up room-related event listeners\n            socketRef.current.on('error', (error) => {\n                console.error('Socket error:', error)\n                toast.error(error.message || 'Socket error occurred')\n            })\n\n            socketRef.current.on('new member joined', ({ username }) => {\n                console.log(`New member joined: ${username}`)\n                toast.success(`${username} joined the room`)\n            })\n\n            socketRef.current.on('member left', ({ username }) => {\n                console.log(`Member left: ${username}`)\n                toast.success(`${username} left the room`)\n            })\n\n            // Listen for user list updates\n            socketRef.current.on('updating client list', ({ userslist }) => {\n                console.log('Updated users list:', userslist)\n                // You can emit this data to child components or store in state if needed\n            })\n        }\n\n        // Cleanup on unmount\n        return () => {\n            if (socketRef.current) {\n                console.log('Cleaning up socket connection')\n                if (roomId && hasJoinedRoom) {\n                    socketRef.current.emit(\"leave room\", { roomId })\n                }\n                socketRef.current.disconnect()\n                socketRef.current = null\n                setIsConnected(false)\n                setHasJoinedRoom(false)\n            }\n        }\n    }, []) // Empty dependency array - only run once\n\n    // Handle room joining\n    useEffect(() => {\n        function kickStrangerOut() {\n            navigate(\"/\", { replace: true })\n            toast.error(\"No username provided\")\n        }\n\n        if (!location.state?.username) {\n            kickStrangerOut()\n            return\n        }\n\n        // Only join room when socket is connected and hasn't joined yet\n        if (isConnected && socketRef.current && roomId && !hasJoinedRoom) {\n            console.log(`Attempting to join room: ${roomId} as ${location.state.username}`)\n            \n            socketRef.current.emit(\"when a user joins\", { \n                roomId, \n                username: location.state.username \n            })\n            \n            setHasJoinedRoom(true)\n            \n            // Set up one-time listener for successful join\n            const handleJoinSuccess = ({ userslist }) => {\n                console.log('Successfully joined room, users:', userslist)\n                toast.success(`Joined room: ${roomId}`)\n                socketRef.current.off('updating client list', handleJoinSuccess)\n            }\n            \n            socketRef.current.on('updating client list', handleJoinSuccess)\n        }\n    }, [isConnected, location.state, roomId, navigate, hasJoinedRoom])\n\n    // Handle page refresh/navigation cleanup\n    useEffect(() => {\n        const handleBeforeUnload = () => {\n            if (socketRef.current && roomId && hasJoinedRoom) {\n                socketRef.current.emit(\"leave room\", { roomId })\n            }\n        }\n\n        // Handle route changes\n        const handleRouteChange = () => {\n            if (socketRef.current && roomId && hasJoinedRoom) {\n                socketRef.current.emit(\"leave room\", { roomId })\n                setHasJoinedRoom(false)\n            }\n        }\n\n        window.addEventListener('beforeunload', handleBeforeUnload)\n        \n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload)\n            handleRouteChange()\n        }\n    }, [roomId, hasJoinedRoom])\n\n    if (!location.state?.username) {\n        return (\n            <div className=\"room\">\n                <h2>No username provided. Please use the form to join a room.</h2>\n            </div>\n        )\n    }\n\n    if (!isConnected) {\n        return (\n            <div className=\"room\">\n                <h2>Connecting to server...</h2>\n                <p>Please wait while we establish connection...</p>\n            </div>\n        )\n    }\n\n    if (!hasJoinedRoom) {\n        return (\n            <div className=\"room\">\n                <h2>Joining room...</h2>\n                <p>Please wait while we join the room...</p>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {addPropsToChildren(children, { \n                socket: socketRef.current,\n                isConnected,\n                roomId,\n                username: location.state?.username\n            })}\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}